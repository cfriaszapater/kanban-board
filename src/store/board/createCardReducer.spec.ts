import { boardReducer, initialState } from "./boardReducer";
import {
  CREATE_CARD_BEGIN,
  CREATE_CARD_FAILURE,
  CREATE_CARD_SUCCESS,
  CreateCardBeginAction
} from "./createCardActions";
import {
  Card,
  CardErrorLoading,
  CardLoaded,
  CardLoading,
  KanbanBoardState
} from "./types";

describe("create card reducer", () => {
  it("should return the initial state", () => {
    expect(boardReducer(undefined, {} as any)).toEqual(initialState);
  });

  it("should add card in loading status on CREATE_CARD_BEGIN from initial state", () => {
    const card: Card = { id: "card-1234", content: "An easy card" };
    const action: CreateCardBeginAction = {
      payload: card,
      type: CREATE_CARD_BEGIN
    };
    const resultState = boardReducer(initialState, action);

    const newCardLoading: CardLoading = { ...card, loading: true };
    expect(resultState).toEqual(
      stateAfterOneCreate(initialState, newCardLoading)
    );
  });

  it("should add card in loading status on CREATE_CARD_BEGIN from state with card added previously", () => {
    const previousCard: Card = { id: "card-1234", content: "An easy card" };
    const previousState: KanbanBoardState = stateAfterOneCreate(
      initialState,
      previousCard
    );
    const firstColId = Object.keys(previousState.columns)[0];

    const card: Card = { id: "card-1235", content: "A difficult card" };
    const action: CreateCardBeginAction = {
      payload: card,
      type: CREATE_CARD_BEGIN
    };
    const resultState = boardReducer(previousState, action);

    const newCardLoading: CardLoading = { ...card, loading: true };
    const stateAfterTwoCreates: KanbanBoardState = {
      ...previousState,
      cards: { ...previousState.cards, [card.id]: newCardLoading },
      columns: {
        ...previousState.columns,
        [firstColId]: {
          ...previousState.columns[firstColId],
          cardIds: [...previousState.columns[firstColId].cardIds, card.id]
        }
      }
    };
    expect(resultState).toEqual(stateAfterTwoCreates);
  });

  it("should disable loading and store _id of card on CREATE_CARD_SUCCESS", () => {
    const previousCard: CardLoading = {
      content: "An easy card",
      id: "card-1234",
      loading: true
    };
    const cardLoadingState: KanbanBoardState = {
      ...initialState,
      cards: { ...initialState.cards, [previousCard.id]: previousCard }
    };

    const cardLoaded: CardLoaded = {
      ...previousCard,
      _id: "id-autogenerated-in-backend",
      loading: false
    };
    const resultState = boardReducer(cardLoadingState, {
      payload: cardLoaded,
      type: CREATE_CARD_SUCCESS
    });

    const stateAfterSuccess: KanbanBoardState = {
      ...cardLoadingState,
      cards: { ...cardLoadingState.cards, [previousCard.id]: cardLoaded }
    };
    expect(resultState).toEqual(stateAfterSuccess);
  });

  it("should set card with error on CREATE_CARD_FAILURE", () => {
    const previousCard: CardLoading = {
      content: "An easy card",
      id: "card-1234",
      loading: true
    };
    const cardLoadingState: KanbanBoardState = {
      ...initialState,
      cards: { ...initialState.cards, [previousCard.id]: previousCard }
    };

    const error = new Error("an error");
    const resultState = boardReducer(cardLoadingState, {
      error,
      payload: previousCard,
      type: CREATE_CARD_FAILURE
    });

    const cardWithError: CardErrorLoading = {
      ...previousCard,
      error: true,
      loading: false
    };
    const stateAfterErrorLoadingCard: KanbanBoardState = {
      ...cardLoadingState,
      cards: { ...cardLoadingState.cards, [previousCard.id]: cardWithError },
      error
    };
    expect(resultState).toEqual(stateAfterErrorLoadingCard);
  });
});

export function stateAfterOneCreate(
  state: KanbanBoardState,
  card: Card
): KanbanBoardState {
  const firstCol = state.columns[Object.keys(state.columns)[0]];
  return {
    ...state,
    cards: { ...state.cards, [card.id]: card },
    columns: {
      ...state.columns,
      [firstCol.id]: {
        ...state.columns[firstCol.id],
        // Card added to cards and columns[0].cardIds (was empty before)
        cardIds: [card.id]
      }
    }
  };
}
